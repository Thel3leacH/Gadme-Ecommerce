import React, { useMemo, useState } from "react";

// ‚úÖ Checkout Demo (shadcn-style) ‚Äì cleaned & fixed
// - ‡πÅ‡∏Å‡πâ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á JSX ‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πá‡∏Å‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (CardContent / div)
// - ‡∏ô‡∏≥‡∏™‡πà‡∏ß‡∏ô "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á", "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô", ‡πÅ‡∏•‡∏∞ "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°" ‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ç‡∏≠
// - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå: ‡∏ä‡∏∑‡πà‡∏≠, ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•, ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà (textarea), ‡πÅ‡∏Ç‡∏ß‡∏á/‡∏ï‡∏≥‡∏ö‡∏•, ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï, ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î, ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå
// - ‡∏Ñ‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏Ñ‡∏≤ + ‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏ù‡∏±‡πà‡∏á‡∏Ç‡∏ß‡∏≤‡πÑ‡∏ß‡πâ
// - ‡πÄ‡∏û‡∏¥‡πà‡∏° Self-tests (mini tests) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ subtotal/total ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏î‡πÇ‡∏°

// ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠ format ‡πÄ‡∏á‡∏¥‡∏ô
const formatTHB = (n) =>
  new Intl.NumberFormat("th-TH", {
    style: "currency",
    currency: "THB",
    minimumFractionDigits: 0,
  }).format(n);
const formatFromSatang = (satang) => formatTHB(Math.round(satang) / 100);

// üëá ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á mock ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ (‡πÄ‡∏î‡πÇ‡∏°)
const mockCart = {
  currency: "THB",
  items: [
    {
      key: "p101_black",
      productId: "p101",
      variantId: "black",
      variantDbId: "var_7f1a3c9e",
      sku: "NT-HE-0101-BL",
      name: "NovaTech Headphones X",
      image: "https://picsum.photos/seed/gadget-101-black/128/128",
      options: { color: "Black" },
      unitPriceSatang: 199000, // 1,990 ‡∏ö‡∏≤‡∏ó
      quantity: 1,
      addedAt: new Date().toISOString(),
    },
    {
      key: "p202_blue",
      productId: "p202",
      variantId: "blue",
      variantDbId: "var_8g2b5p1",
      sku: "SP-PW-0202-BLU",
      name: "Spark Power Bank 20,000mAh",
      image: "https://picsum.photos/seed/gadget-202-blue/128/128",
      options: { color: "Blue" },
      unitPriceSatang: 129000, // 1,290 ‡∏ö‡∏≤‡∏ó
      quantity: 2,
      addedAt: new Date().toISOString(),
    },
  ],
};

function calculateSubtotalSatang(items) {
  return items.reduce((sum, it) => sum + it.unitPriceSatang * it.quantity, 0);
}

// ‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö UI ‡πÄ‡∏•‡πá‡∏Å ‡πÜ ‡πÄ‡∏•‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö shadcn (Tailwind ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
const Card = ({ className = "", children }) => (
  <div className={`rounded-2xl border bg-white shadow-sm ${className}`}>
    {children}
  </div>
);
const CardHeader = ({ className = "", children }) => (
  <div className={`p-4 md:p-5 ${className}`}>{children}</div>
);
const CardTitle = ({ className = "", children }) => (
  <h3
    className={`text-lg font-semibold leading-none tracking-tight ${className}`}
  >
    {children}
  </h3>
);
const CardContent = ({ className = "", children }) => (
  <div className={`p-4 md:p-5 ${className}`}>{children}</div>
);
const CardFooter = ({ className = "", children }) => (
  <div className={`p-4 md:p-5 ${className}`}>{children}</div>
);
const Separator = () => <div className="border-t" />;
const Label = (props) => (
  <label className="mb-1 block text-sm font-medium text-gray-700" {...props} />
);
const Input = ({ className = "", ...rest }) => (
  <input
    className={`w-full rounded-md border px-3 py-2 text-sm outline-none focus:ring-2 focus:ring-gray-900/10 ${className}`}
    {...rest}
  />
);
const Textarea = ({ className = "", ...rest }) => (
  <textarea
    className={`w-full min-h-[88px] rounded-md border px-3 py-2 text-sm outline-none focus:ring-2 focus:ring-gray-900/10 ${className}`}
    {...rest}
  />
);
const Button = ({ variant = "default", className = "", ...rest }) => {
  const base =
    "inline-flex items-center justify-center gap-2 rounded-full px-4 py-2 text-sm font-medium transition";
  const styles = {
    default: "bg-gray-900 text-white hover:bg-black",
    secondary: "bg-gray-100 text-gray-900 hover:bg-gray-200",
    ghost: "bg-transparent text-gray-700 hover:bg-gray-100",
    destructive: "bg-red-600 text-white hover:bg-red-700",
  };
  return (
    <button className={`${base} ${styles[variant]} ${className}`} {...rest} />
  );
};

const Badge = ({ children, className = "" }) => (
  <span
    className={`inline-flex items-center rounded-full bg-gray-100 px-2.5 py-0.5 text-xs text-gray-700 ${className}`}
  >
    {children}
  </span>
);

const Select = ({ value, onChange, placeholder, options }) => (
  <select
    value={value}
    onChange={(e) => onChange(e.target.value)}
    className="w-full rounded-md border bg-white px-3 py-2 text-sm outline-none focus:ring-2 focus:ring-gray-900/10"
  >
    <option value="" disabled>
      {placeholder}
    </option>
    {options?.map((opt) => (
      <option key={opt} value={opt}>
        {opt}
      </option>
    ))}
  </select>
);

const ScrollArea = ({ className = "", children }) => (
  <div className={`overflow-y-auto ${className}`}>{children}</div>
);

// üîé Mini self-tests ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡πÇ‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
function SelfTests({
  items,
  subtotalSatang,
  totalSatang,
  shippingFeeSatang,
  discountSatang,
}) {
  const expectedSubtotal = 199000 + 129000 * 2; // 1,990 + (1,290*2) = 4,570 ‡∏ö‡∏≤‡∏ó => 457000 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå
  const tests = [
    {
      name: "Subtotal is sum(items) in satang",
      pass: subtotalSatang === expectedSubtotal,
      expected: expectedSubtotal,
      got: subtotalSatang,
    },
    {
      name: "Total = subtotal - discount + shipping",
      pass:
        totalSatang ===
        Math.max(0, subtotalSatang - discountSatang) + shippingFeeSatang,
      expected:
        Math.max(0, subtotalSatang - discountSatang) + shippingFeeSatang,
      got: totalSatang,
    },
    {
      name: "Items length > 0",
      pass: items.length > 0,
      expected: "> 0",
      got: items.length,
    },
  ];

  return (
    <details className="mt-4 text-xs text-gray-600">
      <summary className="cursor-pointer select-none">
        Self-tests (click to toggle)
      </summary>
      <ul className="mt-2 space-y-1">
        {tests.map((t) => (
          <li key={t.name}>
            <span
              className={`font-medium ${
                t.pass ? "text-green-600" : "text-red-600"
              }`}
            >
              {t.pass ? "PASS" : "FAIL"}
            </span>{" "}
            ‚Äì {t.name}
            {!t.pass && (
              <span className="ml-1">
                (expected: {t.expected}, got: {t.got})
              </span>
            )}
          </li>
        ))}
      </ul>
    </details>
  );
}

export default function Checkout() {
  // üëâ ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏à‡∏£‡∏¥‡∏á ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å useCart() ‡πÅ‡∏ó‡∏ô mockCart
  const { items, currency } = mockCart;

  // ----- ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö/‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà -----
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [phone, setPhone] = useState("");
  // const [email, setEmail] = useState("");
  const [province, setProvince] = useState("");
  const [district, setDistrict] = useState("");
  const [subdistrict, setSubdistrict] = useState("");
  const [address, setAddress] = useState("");
  const [postcode, setPostcode] = useState("");

  // ----- ‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á / ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏£‡∏ß‡∏° -----
  const [couponCode, setCouponCode] = useState("");
  const [couponApplied, setCouponApplied] = useState(null); // { code, discountSatang }

  const shippingFeeSatang = 0; // ‡∏ï‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å => ‡∏™‡πà‡∏á‡∏ü‡∏£‡∏µ‡πÉ‡∏ô‡πÄ‡∏î‡πÇ‡∏°
  const discountSatang = useMemo(
    () => couponApplied?.discountSatang ?? 0,
    [couponApplied]
  );
  const subtotalSatang = useMemo(() => calculateSubtotalSatang(items), [items]);
  const totalSatang = useMemo(() => {
    const base = Math.max(0, subtotalSatang - discountSatang);
    return base + shippingFeeSatang;
  }, [subtotalSatang, discountSatang, shippingFeeSatang]);

  const isFormValid = () =>
    firstName.trim() &&
    lastName.trim() &&
    phone.trim() &&
    // email.trim() &&
    address.trim() &&
    subdistrict.trim() &&
    district.trim() &&
    province.trim() &&
    postcode.trim() &&
    items.length > 0;

  const applyCoupon = () => {
    const code = couponCode.trim().toUpperCase();
    if (code === "SAVE100") {
      setCouponApplied({ code, discountSatang: 10000 }); // ‡∏•‡∏î 100 ‡∏ö‡∏≤‡∏ó
    } else if (code === "FREESHIP") {
      setCouponApplied({ code, discountSatang: shippingFeeSatang }); // ‡∏•‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á (‡πÄ‡∏î‡πÇ‡∏° = 0)
    } else {
      setCouponApplied(null);
      alert("‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏");
    }
  };

  const placeOrder = () => {
    if (!isFormValid()) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
      return;
    }
    const payload = {
      orderId: "ord_" + Math.random().toString(36).slice(2, 8),
      currency,
      items,
      shipping: {
        method: null, // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡πà‡∏á‡πÉ‡∏ô‡πÄ‡∏î‡πÇ‡∏°‡∏ô‡∏µ‡πâ
        feeSatang: shippingFeeSatang,
        address: {
          firstName,
          lastName,
          phone,
          // email,
          address,
          subdistrict,
          district,
          province,
          postcode,
        },
      },
      payment: { status: "pending" }, // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÉ‡∏ô‡πÄ‡∏î‡πÇ‡∏°‡∏ô‡∏µ‡πâ
      discounts: { coupon: couponApplied, discountSatang },
      amounts: { subtotalSatang, totalSatang },
      createdAt: new Date().toISOString(),
    };
    alert(
      `‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: ${
        payload.orderId
      }\n‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞: ${formatFromSatang(totalSatang)}`
    );
  };

  return (
    <div className="min-h-screen w-full bg-white">
      {/* ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏•‡πà‡∏™‡∏µ‡πÅ‡∏ö‡∏ö‡∏ô‡∏∏‡πà‡∏° ‡πÜ */}
      <div
        className="absolute inset-0 -z-10"
        style={{
          backgroundImage: `radial-gradient(125% 125% at 50% 10%, #ffffff 40%, #14b8a6 100%)`,
          backgroundSize: "100% 100%",
        }}
      />

      <div className="container mx-auto px-4 py-6 md:py-10">
        {/* ‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á */}
        <div className="mb-6 flex items-center gap-3">
          <div className="grid h-6 w-6 place-items-center rounded-full bg-gray-900 text-[11px] text-white">
            üõí
          </div>
          <h1 className="text-2xl font-semibold tracking-tight">
            ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (Checkout)
          </h1>
          <Badge className="ml-1">{items.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</Badge>
        </div>

        <div className="grid grid-cols-1 gap-6 lg:grid-cols-12">
          {/* LEFT */}
          <Card className="lg:col-span-8">
            <CardHeader className="pb-3">
              <CardTitle>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</CardTitle>
            </CardHeader>
            <Separator />
            <CardContent className="space-y-6 pt-6">
              {/* ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö */}
              <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                <div>
                  <Label htmlFor="firstName">‡∏ä‡∏∑‡πà‡∏≠</Label>
                  <Input
                    id="firstName"
                    placeholder="‡∏™‡∏°‡∏ä‡∏≤‡∏¢"
                    value={firstName}
                    onChange={(e) => setFirstName(e.target.value)}
                  />
                </div>
                <div>
                  <Label htmlFor="lastName">‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</Label>
                  <Input
                    id="lastName"
                    placeholder="‡πÉ‡∏à‡∏î‡∏µ"
                    value={lastName}
                    onChange={(e) => setLastName(e.target.value)}
                  />
                </div>
                <div>
                  <Label htmlFor="phone">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</Label>
                  <Input
                    id="phone"
                    placeholder="08x-xxx-xxxx"
                    value={phone}
                    onChange={(e) => setPhone(e.target.value)}
                  />
                </div>
                {/* <div>
                  <Label htmlFor="email">
                    ‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à/‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏û‡∏±‡∏™‡∏î‡∏∏)
                  </Label>
                  <Input
                    id="email"
                    type="email"
                    placeholder="you@example.com"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                  />
                </div> */}
              </div>

              {/* ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà */}
              <div className="grid grid-cols-1 gap-4">
                <div>
                  <Label>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</Label>
                  <Textarea
                    placeholder="‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà, ‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô/‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£, ‡∏ñ‡∏ô‡∏ô, ‡∏ã‡∏≠‡∏¢"
                    value={address}
                    onChange={(e) => setAddress(e.target.value)}
                  />
                </div>
                <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                  <div>
                    <Label>‡πÅ‡∏Ç‡∏ß‡∏á/‡∏ï‡∏≥‡∏ö‡∏•</Label>
                    <Input
                      placeholder="‡πÅ‡∏Ç‡∏ß‡∏á/‡∏ï‡∏≥‡∏ö‡∏•"
                      value={subdistrict}
                      onChange={(e) => setSubdistrict(e.target.value)}
                    />
                  </div>
                  <div>
                    <Label>‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï</Label>
                    <Input
                      placeholder="‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï"
                      value={district}
                      onChange={(e) => setDistrict(e.target.value)}
                    />
                  </div>
                </div>
                <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                  <div>
                    <Label>‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</Label>
                    <Input
                      placeholder="‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"
                      value={province}
                      onChange={(e) => setProvince(e.target.value)}
                    />
                  </div>
                  <div>
                    <Label>‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå</Label>
                    <Input
                      placeholder="xxxxx"
                      value={postcode}
                      onChange={(e) => setPostcode(e.target.value)}
                    />
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* RIGHT */}
          <Card className="lg:col-span-4">
            <CardHeader className="pb-3">
              <CardTitle>‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</CardTitle>
            </CardHeader>
            <Separator />
            <CardContent className="p-0">
              {items.length === 0 ? (
                <div className="p-6 text-sm text-gray-500">‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á</div>
              ) : (
                <>
                  <ScrollArea className="max-h-[40vh]">
                    <ul className="divide-y">
                      {items.map((it) => (
                        <li key={it.key} className="flex gap-3 p-4">
                          <img
                            src={it.image}
                            alt={it.name}
                            className="h-16 w-16 rounded-md border object-cover"
                          />
                          <div className="flex-1">
                            <div className="flex items-start justify-between">
                              <div className="font-medium leading-tight">
                                {it.name}
                              </div>
                              <div className="text-sm text-gray-500">
                                {formatFromSatang(it.unitPriceSatang)}
                              </div>
                            </div>
                            <div className="text-xs text-gray-500">
                              {it.options?.color && (
                                <>‡∏™‡∏µ: {it.options.color} ‚Ä¢ </>
                              )}
                              ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {it.quantity}
                            </div>
                            <div className="mt-1 text-sm">
                              ‡∏£‡∏ß‡∏°:{" "}
                              {formatFromSatang(
                                it.unitPriceSatang * it.quantity
                              )}
                            </div>
                          </div>
                        </li>
                      ))}
                    </ul>
                  </ScrollArea>

                  <div className="space-y-3 p-4">
                    {/* ‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á */}
                    <div className="flex gap-2">
                      <Input
                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á (‡πÄ‡∏ä‡πà‡∏ô SAVE100 / FREESHIP)"
                        value={couponCode}
                        onChange={(e) => setCouponCode(e.target.value)}
                      />
                      <Button variant="secondary" onClick={applyCoupon}>
                        ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á
                      </Button>
                    </div>

                    <Separator />

                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between">
                        <span>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</span>
                        <span>{formatFromSatang(subtotalSatang)}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</span>
                        <span>
                          {shippingFeeSatang === 0
                            ? "‡∏ü‡∏£‡∏µ"
                            : formatFromSatang(shippingFeeSatang)}
                        </span>
                      </div>
                      {discountSatang > 0 && (
                        <div className="flex justify-between text-green-600">
                          <span>
                            ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
                            {couponApplied?.code
                              ? ` (${couponApplied.code})`
                              : ""}
                          </span>
                          <span>-{formatFromSatang(discountSatang)}</span>
                        </div>
                      )}
                      <Separator />
                      <div className="flex justify-between text-base font-semibold">
                        <span>‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞</span>
                        <span>{formatFromSatang(totalSatang)}</span>
                      </div>
                    </div>

                    {/* Self-tests panel */}
                    <SelfTests
                      items={items}
                      subtotalSatang={subtotalSatang}
                      totalSatang={totalSatang}
                      shippingFeeSatang={shippingFeeSatang}
                      discountSatang={discountSatang}
                    />
                  </div>
                </>
              )}
            </CardContent>
            <CardFooter className="flex flex-col items-stretch gap-2">
              <Button
                className="h-11"
                onClick={placeOrder}
                disabled={!isFormValid()}
              >
                ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
              </Button>
              <div className="text-center text-xs text-gray-500">
                üíº ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô: {currency} ‚Ä¢
                ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
              </div>
            </CardFooter>
          </Card>
        </div>
      </div>
    </div>
  );
}
