import { createContext, useContext, useEffect, useState } from "react";
import axios from "axios";
import { toast } from "react-hot-toast";

const CartContext = createContext(null);
const API_URL = "http://localhost:3000";

export function CartProvider({ children }) {
  const [totalQty, setTotalQty] = useState(0);

  // ‡πÅ‡∏¢‡∏Å count ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏à‡∏≤‡∏Å response ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏î‡∏´‡∏•‡∏≤‡∏¢‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï
  const extractCount = (data) => {
    if (typeof data?.count === "number") return data.count;
    if (typeof data?.totalQty === "number") return data.totalQty;
    if (Array.isArray(data?.count) && data.count[0]?.totalQty != null)
      return data.count[0].totalQty;
    if (Array.isArray(data) && data[0]?.totalQty != null)
      return data[0].totalQty;
    return 0;
  };

  const fetchCartCount = async () => {
    const res = await axios.get(`${API_URL}/cart/count`, {
      withCredentials: true,
    });
    setTotalQty(extractCount(res.data));
  };

  // sync ‡∏ï‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
  useEffect(() => {
    (async () => {
      try {
        await fetchCartCount();
      } catch (e) {
        console.log("GET /cart/count failed", e.response?.data || e.message);
      }
    })();
  }, []);

  // Add to cart + hot toast
  const addToCart = async (payload) => {
    const inc = payload?.product_qty ?? 1;

    // üîî ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ loading toast + optimistic
    const tId = toast.loading("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤...");
    setTotalQty((c) => c + inc);

    try {
      const res = await axios.post(`${API_URL}/cart`, payload, {
        withCredentials: true,
        headers: { "Content-Type": "application/json" },
      });

      // ‡∏ñ‡πâ‡∏≤ server ‡∏™‡πà‡∏á count/totalQty ‡∏°‡∏≤‡∏Å‡πá sync ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á
      const serverCount = extractCount(res.data);
      if (serverCount > 0) setTotalQty(serverCount);
      else await fetchCartCount();

      // üîî ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï toast ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÉ‡∏ä‡πâ id ‡πÄ‡∏î‡∏¥‡∏°)
      const name = payload?.product_name ?? "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤";
      toast.success(`‡πÄ‡∏û‡∏¥‡πà‡∏° ${name} x${inc} ‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß üõí`, { id: tId });

      return res.data;
    } catch (e) {
      // rollback ‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á error
      setTotalQty((c) => Math.max(0, c - inc));
      const msg =
        e.response?.data?.message ||
        e.response?.data?.code ||
        e.message ||
        "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à";
      toast.error(msg, { id: tId });
      throw e;
    }
  };

  return (
    <CartContext.Provider value={{ totalQty, addToCart, fetchCartCount }}>
      {children}
    </CartContext.Provider>
  );
}

export const useCart = () => useContext(CartContext);
