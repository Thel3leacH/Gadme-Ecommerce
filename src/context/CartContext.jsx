import { createContext, useContext, useEffect, useRef, useState } from "react";
import axios from "axios";
import { toast } from "react-hot-toast";

const CartContext = createContext(null);
const API_URL = "http://localhost:3000";

export function CartProvider({ children }) {
  const [totalQty, setTotalQty] = useState(0);
  const [adding, setAdding] = useState(false);

  // ‡πÅ‡∏¢‡∏Å count ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏à‡∏≤‡∏Å response ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏î‡∏´‡∏•‡∏≤‡∏¢‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï
  const extractCount = (data) => {
    if (typeof data?.count === "number") return data.count;
    if (typeof data?.totalQty === "number") return data.totalQty;
    if (Array.isArray(data?.count) && data.count[0]?.totalQty != null)
      return data.count[0].totalQty;
    if (Array.isArray(data) && data[0]?.totalQty != null)
      return data[0].totalQty;
    return 0;
  };

  const busyRef = useRef(new Set());
  const withItemLock = async (key, fn) => {
    if (busyRef.current.has(key)) return; // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ã‡πâ‡∏≥
    busyRef.current.add(key);
    try {
      return await fn();
    } finally {
      busyRef.current.delete(key);
    }
  };

  const fetchCartCount = async () => {
    const res = await axios.get(`${API_URL}/cart/count`, {
      withCredentials: true,
    });
    setTotalQty(extractCount(res.data));
  };

  // sync ‡∏ï‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
  useEffect(() => {
    (async () => {
      try {
        await fetchCartCount();
      } catch (e) {
        console.log("GET /cart/count failed", e.response?.data || e.message);
      }
    })();
  }, []);

  // Add to cart + hot toast
  const addToCart = async (payload) => {
    const inc = payload?.product_qty ?? 1;

    // üîî ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ loading toast + optimistic
    const tId = toast.loading("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤...");
    setTotalQty((c) => c + inc);

    try {
      const res = await axios.post(`${API_URL}/cart`, payload, {
        withCredentials: true,
        headers: { "Content-Type": "application/json" },
      });

      // ‡∏ñ‡πâ‡∏≤ server ‡∏™‡πà‡∏á count/totalQty ‡∏°‡∏≤‡∏Å‡πá sync ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á
      const serverCount = extractCount(res.data);
      if (serverCount > 0) setTotalQty(serverCount);
      else await fetchCartCount();

      // üîî ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï toast ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÉ‡∏ä‡πâ id ‡πÄ‡∏î‡∏¥‡∏°)
      const name = payload?.product_name ?? "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤";
      toast.success(`‡πÄ‡∏û‡∏¥‡πà‡∏° ${name} x${inc} ‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß üõí`, { id: tId });

      return res.data;
    } catch (e) {
      // rollback ‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á error
      setTotalQty((c) => Math.max(0, c - inc));
      const msg =
        e.response?.data?.message ||
        e.response?.data?.code ||
        e.message ||
        "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à";
      toast.error(msg, { id: tId });
      throw e;
    } finally {
      setAdding(false); // ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à
    }
  };

  const setQty = async (itemId, nextQty, { currentQty } = {}) =>
    withItemLock(itemId, async () => {
      const delta =
        typeof currentQty === "number"
          ? Number(nextQty) - Number(currentQty)
          : 0;
      const tId =
        delta > 0
          ? toast.loading("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô...")
          : toast.loading("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô...");
      if (delta) setTotalQty((c) => Math.max(0, c + delta));

      try {
        const res = await axios.put(
          `${API_URL}/cart/${itemId}`,
          { product_qty: nextQty },
          { withCredentials: true }
        );
        const serverCount = extractCount(res.data);
        if (serverCount > 0) setTotalQty(serverCount);
        else await fetchCartCount();
        toast.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß", { id: tId });
        return res.data;
      } catch (e) {
        if (delta) setTotalQty((c) => Math.max(0, c - delta)); // rollback
        const msg =
          e.response?.data?.message || e.message || "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à";
        toast.error(msg, { id: tId });
        throw e;
      }
    });

  // Increase quantity by step (default 1)
  const incQty = async (itemId, step = 1) => {
    const tId = toast.loading("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô...");
    setTotalQty((c) => c + Number(step)); // optimistic
    try {
      const res = await axios.patch(
        `${API_URL}/cart/${itemId}/increase`,
        null,
        {
          params: { step },
          withCredentials: true,
        }
      );
      const serverCount = extractCount(res.data);
      if (serverCount > 0) setTotalQty(serverCount);
      else await fetchCartCount();
      toast.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß", { id: tId });
      return res.data;
    } catch (e) {
      setTotalQty((c) => Math.max(0, c - Number(step))); // rollback
      const msg =
        e.response?.data?.message || e.message || "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à";
      toast.error(msg, { id: tId });
      throw e;
    }
  };

  // Decrease quantity by step (default 1)
  const decQty = async (itemId, step = 1) => {
    const tId = toast.loading("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô...");
    setTotalQty((c) => Math.max(0, c - Number(step))); // optimistic (‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 0)
    try {
      const res = await axios.patch(
        `${API_URL}/cart/${itemId}/decrease`,
        null,
        {
          params: { step },
          withCredentials: true,
        }
      );
      const serverCount = extractCount(res.data);
      if (serverCount > 0) setTotalQty(serverCount);
      else await fetchCartCount();
      toast.success("‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß", { id: tId });
      return res.data;
    } catch (e) {
      setTotalQty((c) => c + Number(step)); // rollback
      const msg = e.response?.data?.message || e.message || "‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à";
      toast.error(msg, { id: tId });
      throw e;
    }
  };

  const removeItem = async (itemId, { currentQty } = {}) => {
    const tId = toast.loading("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£...");
    if (typeof currentQty === "number") {
      setTotalQty((c) => Math.max(0, c - Number(currentQty))); // optimistic
    }

    try {
      const res = await axios.delete(`${API_URL}/cart/${itemId}`, {
        withCredentials: true,
      });

      // sync ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å server (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï)
      const serverCount = extractCount(res.data);
      if (serverCount >= 0) setTotalQty(serverCount);
      else await fetchCartCount();

      toast.success("‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß", { id: tId });
      return res.data;
    } catch (e) {
      // ‡∏ñ‡πâ‡∏≤‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏ã‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ó‡∏ô (‡πÇ‡∏£‡∏•‡πÅ‡∏ö‡πá‡∏Å‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ qty ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ä‡∏±‡∏î)
      await fetchCartCount();
      const msg = e.response?.data?.message || e.message || "‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à";
      toast.error(msg, { id: tId });
      throw e;
    }
  };

  return (
    <CartContext.Provider
      value={{
        adding,
        totalQty,
        addToCart,
        fetchCartCount,
        setQty,
        incQty,
        decQty,
        removeItem,
      }}
    >
      {children}
    </CartContext.Provider>
  );
}

export const useCart = () => useContext(CartContext);
